[{"/home/ray/Dropbox/ETHEREUM/windt-react/src/index.js":"1","/home/ray/Dropbox/ETHEREUM/windt-react/src/reportWebVitals.js":"2","/home/ray/Dropbox/ETHEREUM/windt-react/src/App.js":"3","/home/ray/Dropbox/ETHEREUM/windt-react/src/web3.js":"4","/home/ray/Dropbox/ETHEREUM/windt-react/src/windt.js":"5"},{"size":500,"mtime":1607283764066,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1607283764070,"results":"8","hashOfConfig":"7"},{"size":6310,"mtime":1607355950817,"results":"9","hashOfConfig":"7"},{"size":92,"mtime":1607283927463,"results":"10","hashOfConfig":"7"},{"size":5479,"mtime":1607357018475,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"w7thn7",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ray/Dropbox/ETHEREUM/windt-react/src/index.js",[],["24","25"],"/home/ray/Dropbox/ETHEREUM/windt-react/src/reportWebVitals.js",[],"/home/ray/Dropbox/ETHEREUM/windt-react/src/App.js",["26"],"import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport web3 from './web3'\nimport windt from './windt';\n\nclass App extends Component {\n\n  state = {\n    admin: '',\n    message: '',\n    projectValue: '',\n    tokensTotal: '',\n    partners: '',\n    tokenValue: '',\n\n    serviceCost: '',\n    platformCost: '',\n    maintanenceCost: '',\n    taxCost: '',\n    insuranceCost: '',\n    utilityCost: '',\n\n    enterValue: '',\n    paymentFromGrid: ''\n  }\n\n  async componentDidMount() {\n    const admin = await windt.methods.admin().call();  \n    const balance = await web3.eth.getBalance(windt.options.address);\n    const projectValue = await windt.methods.projectValue().call();\n    const tokensTotal = await windt.methods.tokensTotal().call();\n    const partners = await windt.methods.getPartners().call();\n    const tokenValue = await windt.methods.tokenValue().call();\n\n    var serviceCost = await windt.methods.serviceCost().call();\n    var platformCost = await windt.methods.platformCost().call();\n    var maintanenceCost = await windt.methods.maintanenceCost().call();\n    var taxCost = await windt.methods.taxCost().call();\n    var insuranceCost = await windt.methods.insuranceCost().call();\n    var utilityCost = await windt.methods.utilityCost().call();\n\n    serviceCost = web3.utils.fromWei(serviceCost, 'ether');\n    platformCost = web3.utils.fromWei(platformCost, 'ether');\n    maintanenceCost = web3.utils.fromWei(maintanenceCost, 'ether');\n    taxCost = web3.utils.fromWei(taxCost, 'ether');\n    insuranceCost = web3.utils.fromWei(insuranceCost, 'ether');\n    utilityCost = web3.utils.fromWei(utilityCost, 'ether');\n\n    const projectBalance = Number(balance) - Number(projectValue);\n\n    this.setState({ \n      admin,\n      balance, \n      projectValue, \n      tokensTotal, \n      partners: partners.length,\n      tokenValue,\n      projectBalance,\n    \n      serviceCost,\n      platformCost,\n      maintanenceCost,\n      taxCost,\n      insuranceCost,\n      utilityCost\n    });\n  }\n\n  submitPaymentFromGrid = async (event) => {\n    event.preventDefault();\n\n    this.setState({ message: 'Waiting for transaction to process...' });\n    const accounts = await web3.eth.getAccounts();\n\n    await windt.methods.gravy().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.paymentFromGrid, 'ether')\n    });\n\n    this.setState({ message: 'Transaction Successful!' });\n  }\n\n  enter = async (event) => {\n    event.preventDefault();\n\n    this.setState({ message: 'Waiting for transaction to process...' });\n    const accounts = await web3.eth.getAccounts();\n\n    await windt.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.enterValue, 'ether')\n    });\n\n    this.setState({ message: 'Transaction Successful!' });\n  }\n\n  setYearlyMaintanence = async (event) => {\n    event.preventDefault();\n\n    this.setState({ message: 'Waiting for transaction to process...' });\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting for transaction to process...'});\n\n    await windt.methods\n      .setAnualCosts(\n        this.state.serviceCost,\n        this.state.platformCost,\n        this.state.maintanenceCost,\n        this.state.taxCost,\n        this.state.insuranceCost,\n        this.state.utilityCost)\n      .send({\n        from: accounts[0]\n        });    \n\n    this.setState({ message: 'Transaction Successful!' });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Client</ h1>\n        <p>Project value: <b>{ web3.utils.fromWei(this.state.projectValue, 'ether') } </b>ETH</p>\n        <p>Tokens total: <b>{ this.state.tokensTotal }</b></p>\n        <p>Tokens available: <b>{ Number(this.state.tokensTotal) - Number(this.state.partners) }</b></p>\n        <p>Token cost: <b>{ web3.utils.fromWei(this.state.tokenValue) }</b> ETH</p>\n        <h4>Maintanence</ h4>\n        <p>Service yearly costs: <b>{ this.state.serviceCost }</b> ETH</p>\n        <p>Platform yearly costs: <b>{ this.state.platformCost }</b> ETH</p>\n        <p>Maintanence yearly costs: <b>{ this.state.maintanenceCost }</b> ETH</p>\n        <p>Tax yearly costs: <b>{ this.state.taxCost }</b> ETH</p>\n        <p>Insurance yearly costs: <b>{ this.state.insuranceCost }</b> ETH</p>\n        <p>Utility yearly costs: <b>{ this.state.utilityCost }</b> ETH</p>\n          <form onSubmit = { this.enter }>\n            Buy token \n            <input value = { this.state.enterValue } onChange = { event => this.setState({ enterValue: event.target.value }) }/>\n            <button>Buy</button>\n          </form>\n\n        <hr />\n        <h1>{ this.state.message } </h1>\n        <hr />\n\n        <h1>Admin</ h1>\n\n        <p>Account: { this.state.admin } ETH</p>\n        <p>Project balance: <b>{ this.state.projectBalance / 1000000000000000000 }</b> ETH</p>\n        <p>Shit heads: <b>{ this.state.partners }</b> </p>\n        <form onSubmit = { this.submitPaymentFromGrid } >\n          <input value = { this.state.paymentFromGrid } onChange = { event => this.setState({ paymentFromGrid: event.target.value }) }/> ETH Monthly payment from grid <br />\n          <button>Pay</button>\n        </form>\n        <form onSubmit = { this.setYearlyMaintanence }>\n            <label>Set yearly maintanence costs: </label><br />\n            <input value = { this.state.serviceCost } onChange = { event => this.setState({ serviceCost: event.target.value }) }/>WEI / ETH Service<br />\n            <input value = { this.state.platformCost } onChange = { event => this.setState({ platformCost: event.target.value}) }/>WEI / ETH Platform<br />\n            <input value = { this.state.maintanenceCost } onChange = { event => this.setState({ maintanenceCost: event.target.value}) }/>WEI / ETH Maintanence<br />\n            <input value = { this.state.taxCost } onChange = { event => this.setState({ taxCost: event.target.value }) }/>WEI / ETH Tax<br />\n            <input value = { this.state.insuranceCost } onChange = { event => this.setState({ insuranceCost: event.target.value }) }/>WEI / ETH Insurance<br />\n            <input value = { this.state.utilityCost } onChange = { event => this.setState({ utilityCost: event.target.value }) }/>WEI / ETH Utility<br />\n            <button>Set</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/home/ray/Dropbox/ETHEREUM/windt-react/src/web3.js",[],"/home/ray/Dropbox/ETHEREUM/windt-react/src/windt.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":1,"column":8,"nodeType":"33","messageId":"34","endLine":1,"endColumn":12},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]